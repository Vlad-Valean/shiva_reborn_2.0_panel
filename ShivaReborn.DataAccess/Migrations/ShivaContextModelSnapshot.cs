// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShivaReborn.DataAccess;

#nullable disable

namespace ShivaReborn.DataAccess.Migrations
{
    [DbContext(typeof(ShivaContext))]
    partial class ShivaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShivaReborn.DataAccess.Models.Building", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Buildings", (string)null);
                });

            modelBuilder.Entity("ShivaReborn.DataAccess.Models.Floor", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("Buildingid")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Buildingid");

                    b.ToTable("Floors", (string)null);
                });

            modelBuilder.Entity("ShivaReborn.DataAccess.Models.Place", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("Floorid")
                        .HasColumnType("text");

                    b.Property<string>("User")
                        .HasColumnType("text");

                    b.Property<bool>("isAssigned")
                        .HasColumnType("boolean");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("Floorid");

                    b.HasIndex("User")
                        .IsUnique();

                    b.ToTable("Places", (string)null);
                });

            modelBuilder.Entity("ShivaReborn.DataAccess.Models.User", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("text");

                    b.Property<string>("buildingid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("buildingid");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ShivaReborn.DataAccess.Models.Floor", b =>
                {
                    b.HasOne("ShivaReborn.DataAccess.Models.Building", null)
                        .WithMany("floors")
                        .HasForeignKey("Buildingid");
                });

            modelBuilder.Entity("ShivaReborn.DataAccess.Models.Place", b =>
                {
                    b.HasOne("ShivaReborn.DataAccess.Models.Floor", null)
                        .WithMany("places")
                        .HasForeignKey("Floorid");

                    b.HasOne("ShivaReborn.DataAccess.Models.User", "assignedUser")
                        .WithOne("assignedPlace")
                        .HasForeignKey("ShivaReborn.DataAccess.Models.Place", "User");

                    b.Navigation("assignedUser");
                });

            modelBuilder.Entity("ShivaReborn.DataAccess.Models.User", b =>
                {
                    b.HasOne("ShivaReborn.DataAccess.Models.Building", "building")
                        .WithMany()
                        .HasForeignKey("buildingid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("building");
                });

            modelBuilder.Entity("ShivaReborn.DataAccess.Models.Building", b =>
                {
                    b.Navigation("floors");
                });

            modelBuilder.Entity("ShivaReborn.DataAccess.Models.Floor", b =>
                {
                    b.Navigation("places");
                });

            modelBuilder.Entity("ShivaReborn.DataAccess.Models.User", b =>
                {
                    b.Navigation("assignedPlace")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
